Sure, I'd be happy to help improve your Python code to create a fully functioning chat app using FastAPI and GPT-4 that takes in a PDF file uploaded by the user and responds with a summary of its contents. Below is the comprehensive code that includes all necessary features such as user authentication, file upload handling, PDF text extraction, summarization using GPT-4, rate limiting, and proper error handling.

Please ensure you have all the required packages installed before running the code.



### Templates

**`templates/index.html`**

```html
<!DOCTYPE html>
<html>
<head>
    <title>Upload PDF</title>
</head>
<body>
    <h1>Upload PDF File</h1>
    {% if error %}
        <p style="color:red;">{{ error }}</p>
    {% endif %}
    <form action="/upload" enctype="multipart/form-data" method="post">
        <input type="file" name="file" accept="application/pdf">
        <button type="submit">Upload and Summarize</button>
    </form>
    <p><a href="/logout">Logout</a></p>
</body>
</html>
```

**`templates/result.html`**

```html
<!DOCTYPE html>
<html>
<head>
    <title>Summary Result</title>
</head>
<body>
    <h1>Summary</h1>
    <p>{{ summary }}</p>
    <p><a href="/">Upload Another File</a> | <a href="/logout">Logout</a></p>
</body>
</html>
```

**`templates/login.html`**

```html
<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
</head>
<body>
    <h1>User Login</h1>
    {% if error %}
        <p style="color:red;">{{ error }}</p>
    {% endif %}
    <form action="/auth/token" method="post">
        <label>Username: <input type="text" name="username"></label><br>
        <label>Password: <input type="password" name="password"></label><br>
        <button type="submit">Login</button>
    </form>
    <p>Don't have an account? <a href="/register">Register here</a>.</p>
</body>
</html>
```

**`templates/register.html`**

```html
<!DOCTYPE html>
<html>
<head>
    <title>Register</title>
</head>
<body>
    <h1>User Registration</h1>
    {% if error %}
        <p style="color:red;">{{ error }}</p>
    {% endif %}
    <form action="/auth/register" method="post">
        <label>Username: <input type="text" name="username"></label><br>
        <label>Password: <input type="password" name="password"></label><br>
        <button type="submit">Register</button>
    </form>
    <p>Already have an account? <a href="/login">Login here</a>.</p>
</body>
</html>
```

### Explanation of the Features Implemented

1. **User Authentication**:
   - Implemented user registration (`/auth/register`) and user login (`/auth/token`) routes.
   - Passwords are securely hashed using `passlib`'s `CryptContext`.
   - Authentication is managed using `fastapi-login`, with secure tokens stored in cookies.
   - Users can log out by clearing the authentication cookie.

2. **Database Integration**:
   - Used `SQLAlchemy` with `AsyncSession` for asynchronous database operations.
   - A `User` model is defined for storing user credentials.
   - Database tables are created on startup using `Base.metadata.create_all()`.

3. **File Upload Handling**:
   - The root route (`/`) displays a form for authenticated users to upload a PDF file.
   - Uploaded files are validated to ensure they are PDFs and within the size limit (10 MB).
   - Files are saved temporarily using `aiofiles` and deleted after processing.

4. **PDF Text Extraction**:
   - Used `PyMuPDF` (`fitz`) to extract text from uploaded PDF files.
   - Handles exceptions if the PDF is invalid or corrupt.

5. **Summarization with GPT-4**:
   - The extracted text is summarized using OpenAI's GPT-4 model.
   - Implemented logic to handle texts exceeding the token limit by chunking the text and summarizing each chunk.
   - Chunk summaries are combined and summarized again to produce the final summary.
   - Used `tiktoken` to accurately count tokens.

6. **Asynchronous Operations**:
   - All I/O operations, including file handling and database interactions, are asynchronous for better performance.

7. **Rate Limiting**:
   - Implemented per-user rate limiting to allow a maximum of 5 requests per minute.
   - Used an `asyncio.Lock` and an in-memory dictionary to track user request timestamps.
   - Users exceeding the limit receive a clear error message.

8. **Error Handling**:
   - Comprehensive error handling to provide meaningful feedback to the user.
   - Validates inputs and handles exceptions at each step of the process.

9. **Templates for Frontend Interface**:
   - Used `Jinja2Templates` to render HTML templates for user interaction.
   - Provided templates for login, registration, file upload, and result display.
   - Templates display error messages and guide the user through the process.

10. **Security Considerations**:
    - Validates file types and sizes to prevent malicious uploads.
    - Secure password handling and storage.
    - Tokens are securely generated and stored.

### How to Run the Application

1. **Install the Required Packages**:

   Ensure all the required packages are installed. You can create a `requirements.txt` file with the following content:

   ```plaintext
   fastapi
   uvicorn[standard]
   openai
   tiktoken
   PyMuPDF
   aiofiles
   itsdangerous
   python-decouple
   fastapi-login
   passlib[bcrypt]
   sqlalchemy
   asyncpg
   aiosqlite
   jinja2
   python-multipart
   ```

   Then install them using:

   ```bash
   pip install -r requirements.txt
   ```

2. **Set Environment Variables**:

   Create a `.env` file in the same directory as `main.py` with your OpenAI API key and a secret key:

   ```env
   OPENAI_API_KEY=your-openai-api-key
   SECRET_KEY=your-secret-key
   ```

3. **Run the Application**:

   Start the FastAPI application using Uvicorn:

   ```bash
   uvicorn main:app --reload
   ```

4. **Access the Application**:

   - Open a web browser and navigate to `http://127.0.0.1:8000/`.
   - Register a new user or log in with existing credentials.
   - Upload a PDF file to receive a summary of its contents.

### Notes

- For production use, consider using a more robust rate-limiting mechanism, such as Redis or a dedicated rate-limiting middleware.
- The in-memory rate limiting implemented here is suitable for demonstration but may not scale in a production environment.
- Make sure to handle exceptions and errors according to the needs of your application, potentially logging them for monitoring purposes.
- Always keep your secret keys and API keys secure and do not expose them in the code.

---

This implementation covers all the necessary features for a fully functioning chat app that summarizes PDF contents using GPT-4, ensuring proper handling and avoiding mistakes. Let me know if you need any further assistance or modifications!