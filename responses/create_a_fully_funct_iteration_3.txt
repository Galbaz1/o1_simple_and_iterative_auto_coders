Here's the improved Python code for your chat app that accepts a PDF file upload and returns a summary of its contents. The code includes several enhancements:

- **Better PDF Text Extraction**: Uses `PyMuPDF` (`fitz`) for more reliable text extraction from PDFs.
- **Web Interface**: Adds a simple HTML frontend using Jinja2 templates for users to upload PDFs and view summaries.
- **Improved Exception Handling**: Handles specific exceptions and retries OpenAI API calls if they fail.
- **Logging**: Incorporates logging to help trace the application's behavior and diagnose issues.
- **File Size Limit**: Implements a maximum file size limit to prevent server overload.
- **Text Chunking**: Splits the text into manageable chunks based on token count for better summarization.
- **Environment Variable Configuration**: Uses environment variables for configuration, improving security and flexibility.
- **CORS Middleware**: Adds CORS middleware to handle cross-origin requests.
- **Session Middleware**: Prepares for future enhancements that might require session management.
- **HTML Responses**: Returns HTML responses when appropriate, improving user experience.

---

**main.py**



---

**templates/upload_form.html**

Create a directory named `templates` in the same directory as `main.py` and add the following HTML file:

```html
<!DOCTYPE html>
<html>
<head>
    <title>PDF Summarizer</title>
</head>
<body>
    <h1>Upload a PDF to Summarize</h1>
    <form action="/summarize_pdf/" enctype="multipart/form-data" method="post">
        <input name="file" type="file" accept=".pdf">
        <input type="submit" value="Upload">
    </form>
</body>
</html>
```

---

**templates/summary.html**

```html
<!DOCTYPE html>
<html>
<head>
    <title>PDF Summary</title>
</head>
<body>
    <h1>Summary of Your PDF:</h1>
    <p>{{ summary }}</p>
    <a href="/">Upload another PDF</a>
</body>
</html>
```

---

**Detailed Explanation of Improvements**

1. **Better PDF Text Extraction**:
   - Replaced `PyPDF2` with `PyMuPDF` (`fitz`) for more accurate text extraction, especially with complex PDFs.
   - Handles PDFs that may have extraction limitations more gracefully.

2. **Web Interface**:
   - Added two HTML templates (`upload_form.html` and `summary.html`) for a simple frontend.
   - Users can now upload PDFs via a browser and view the summary directly.
   - The application detects if the request expects HTML and responds accordingly.

3. **Improved Exception Handling**:
   - Implemented retries for OpenAI API calls to handle transient errors.
   - Catches specific exceptions like `OpenAIError` and provides meaningful error messages.
   - Checks for cases where the PDF might not contain any extractable text.

4. **Logging**:
   - Configured logging to track the application's behavior and assist in debugging.
   - Logs important steps like processing chunks and errors.

5. **File Size Limit**:
   - Introduced a maximum file size limit (e.g., 10MB) to prevent server overload.
   - Validates the size of the uploaded file before processing.

6. **Text Chunking**:
   - Improved text splitting logic to handle token limits more effectively.
   - Splits text into chunks based on token count rather than character count.

7. **Environment Variable Configuration**:
   - Ensures the OpenAI API key is securely obtained from environment variables.
   - Encourages better security practices by avoiding hardcoding sensitive information.

8. **CORS Middleware**:
   - Added CORS middleware to handle cross-origin requests, making the API more flexible for different clients.

9. **Session Middleware**:
   - Included session middleware setup for potential future features that might require session management.

10. **HTML Responses**:
    - The `summarize_pdf` endpoint now returns HTML responses when appropriate, enhancing user experience.

11. **Error Responses**:
    - Provides user-friendly error messages both in HTML and JSON formats, depending on the request.

---

**Instructions to Run the Application**

1. **Set Up the Environment**:
   - Ensure you have Python 3.7 or higher installed.
   - Save the `main.py` file and create a `templates` directory with the two HTML files inside it.

2. **Install Dependencies**:
   - The script automatically checks for missing packages and installs them.
   - Alternatively, you can manually install the required packages:
     ```sh
     pip install fastapi uvicorn PyMuPDF openai tiktoken python-multipart jinja2 aiofiles
     ```

3. **Set Your OpenAI API Key**:
   - Export your OpenAI API key as an environment variable:
     ```sh
     export OPENAI_API_KEY='your-api-key-here'
     ```
     Replace `'your-api-key-here'` with your actual OpenAI API key.

4. **Run the Application**:
   - Start the application using:
     ```sh
     python main.py
     ```
     Or, if you prefer, use Uvicorn directly:
     ```sh
     uvicorn main:app --host 0.0.0.0 --port 8000
     ```

5. **Access the Application**:
   - Open your web browser and navigate to `http://localhost:8000/`.
   - Use the provided form to upload a PDF and view the summary.

6. **API Usage**:
   - You can also interact with the API programmatically by sending a `POST` request to `/summarize_pdf/` with a PDF file.

---

**Note**: Make sure to handle your OpenAI API key securely and be aware of the usage limits and costs associated with the OpenAI API.